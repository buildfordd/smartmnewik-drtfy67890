{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_FAIL, USER_LOGIN_SUCCESS, USER_LOGIN_REQUEST, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL } from \"../constants/userConstant\";\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/profile`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/HP/Desktop/e commas/frontend/src/actions/userAction.js"],"names":["axios","USER_LOGIN_FAIL","USER_LOGIN_SUCCESS","USER_LOGIN_REQUEST","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { \r\n    USER_LOGIN_FAIL, \r\n    USER_LOGIN_SUCCESS, \r\n    USER_LOGIN_REQUEST, \r\n    USER_LOGOUT, \r\n    USER_REGISTER_REQUEST, \r\n    USER_REGISTER_SUCCESS, \r\n    USER_REGISTER_FAIL, \r\n    USER_DETAILS_REQUEST, \r\n    USER_DETAILS_SUCCESS, \r\n    USER_DETAILS_FAIL, \r\n    USER_UPDATE_PROFILE_REQUEST, \r\n    USER_UPDATE_PROFILE_SUCCESS, \r\n    USER_UPDATE_PROFILE_FAIL } from \"../constants/userConstant\"\r\n\r\nexport const login =(email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config ={\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.post(\r\n            '/api/users/login', \r\n            {email, password}, \r\n            config\r\n            )\r\n\r\n            dispatch({\r\n                type: USER_LOGIN_SUCCESS,\r\n                payload: data  \r\n            })\r\n\r\n            localStorage.setItem('userInfo', JSON.stringify(data))\r\n        } catch (error){\r\n            dispatch({ type: USER_LOGIN_FAIL,\r\n                payload: error.response && error.response.data.message \r\n                ? error.response.data.message \r\n                : error.message,\r\n            })\r\n\r\n    }\r\n} \r\n\r\nexport const logout =() => (dispatch) =>{\r\n    localStorage.removeItem('userInfo')\r\n    dispatch ({type : USER_LOGOUT })\r\n}\r\n\r\n\r\n\r\n\r\nexport const register =(name, email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST,\r\n        })\r\n\r\n        const config ={\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.post(\r\n            '/api/users', \r\n            {name, email, password}, \r\n            config\r\n            )\r\n\r\n            dispatch({\r\n                type: USER_REGISTER_SUCCESS,\r\n                payload: data,\r\n            })\r\n            dispatch({\r\n                type: USER_LOGIN_SUCCESS,\r\n                payload: data,\r\n            })\r\n\r\n            localStorage.setItem('userInfo', JSON.stringify(data))\r\n        } catch (error){\r\n            dispatch({ type: USER_REGISTER_FAIL,\r\n                payload: error.response && error.response.data.message \r\n                ? error.response.data.message \r\n                : error.message,\r\n            })\r\n\r\n    }\r\n} \r\n\r\n\r\nexport const getUserDetails =(id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo}, \r\n      } = getState()\r\n\r\n        const config ={\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n\r\n        const {data} = await axios.get(`/api/users/${id}`, config)\r\n\r\n            dispatch({\r\n                type: USER_DETAILS_SUCCESS,\r\n                payload: data,\r\n            })\r\n    \r\n        } catch (error){\r\n            dispatch({ type: USER_DETAILS_FAIL,\r\n                payload: error.response && error.response.data.message \r\n                ? error.response.data.message \r\n                : error.message,\r\n            })\r\n\r\n    }\r\n} \r\n\r\nexport const updateUserProfile =(user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: {userInfo}, \r\n      } = getState()\r\n\r\n        const config ={\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            },\r\n        }\r\n\r\n        const {data} = await axios.put(`/api/users/profile`, user, config)\r\n\r\n            dispatch({\r\n                type: USER_UPDATE_PROFILE_SUCCESS,\r\n                payload: data,\r\n            })\r\n    \r\n        } catch (error){\r\n            dispatch({ type: USER_UPDATE_PROFILE_FAIL,\r\n                payload: error.response && error.response.data.message \r\n                ? error.response.data.message \r\n                : error.message,\r\n            })\r\n\r\n    }\r\n} "]},"metadata":{},"sourceType":"module"}